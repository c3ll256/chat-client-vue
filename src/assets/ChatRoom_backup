<template>
  <chat-window
    :currentUserId="currentUserId"
    :currentUserName="currentUserName"
    :rooms="rooms"
    :messages="messages"
    :theme="theme"
    :messagesLoaded="messagesLoaded"
    @fetchMessages="fetchMessages"
    @sendMessage="sendMessage"
  />
</template>

<script>
import ChatWindow from "vue-advanced-chat";
import "vue-advanced-chat/dist/vue-advanced-chat.css";

import DayJs from "dayjs";

export default {
  components: {
    ChatWindow,
  },
  props: ["currentUserId", "currentUserName", "theme"],
  data() {
    return {
      rooms: [
        {
          roomId: "1",
          roomName: "远野和田所君",
          avatar: "./assets/810.jpeg",
          users: [
            {
              _id: "114514",
              username: "田所浩二",
              avatar: "./assets/114514.jpg",
              status: {
                state: "online",
                last_changed: "Now",
              },
            },
            {
              _id: "1919810",
              username: "远野",
              avatar: "./assets/1919.jpg",
              status: {
                state: "online",
                last_changed: "Now",
              },
            },
          ],
          typingUsers: [4321],
        },
      ],
      messagesLoaded: false,
      messages: [],
      message: "",
    };
  },
  sockets: {
    connect() { },
  },
  methods: {
    async sendMessage({ content, roomId, file, replyMessage }) {
      console.log(this.currentUserName);
      const message = {
        sender_name: this.currentUserName,
        sender_id: this.currentUserId,
        room_id: this.roomId, 
        content,
        date: DayJs().format(),
        timestamp: new Date(),
      };

      if (file) {
        message.file = {
          name: file.name,
          size: file.size,
          type: file.type,
          url: file.localUrl,
        };

        if (file.audio) {
          message.file.audio = true;
          message.file.duration = file.duration;
        }
      }
      if (replyMessage) {
        message.replyMessage = {
          _id: replyMessage._id,
          content: replyMessage.content,
          sender_id: replyMessage.sender_id,
        };
        if (replyMessage.file) {
          message.replyMessage.file = replyMessage.file;
        }
      }
      await this.$socket.emit(roomId, message);

    },
    fetchMessages() {
      this.messagesLoaded = true;

      setTimeout(() => {
        this.messagesLoaded = true;
      }, 0);
    },
  },
  mounted() {
    this.sockets.subscribe("1", (data) => {
      let messages = this.messages;
      messages.push({
        _id: data._id,
        content: data.content,
        sender_id: data.sender_id,
        username: data.sender_name,
        date: DayJs(data.timestamp).format("MM-DD-YYYY"),
        timestamp: DayJs(data.timestamp).format("hh:mm"),
        system: false,
        saved: true,
        distributed: true,
        seen: true,
        disable_actions: true,
        disable_reactions: true,
      });
      this.messages = messages;
    });
  },
};
</script>

<style>
</style>