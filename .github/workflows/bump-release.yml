# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]

jobs:

#   bump-version:
    
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v2

#     - name:  Automated Version Bump
#       uses:  phips28/gh-action-bump-version@master
#       env:
#         GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
#       with:
#         skip-tag:  'true'

  build:
#     needs: bump-version
    
    runs-on: macos-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Get jq
      run: |
        wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64
        mv jq* jq
        chmod +x jq
        
    - name: Get version
      id: get-version
      run: echo "::set-output name=version::$(cat package.json | ./jq -r .version)"

    - run: npm i @vue/cli -g
    - run: npm i
    - run: npm run build --if-present
    - run: npm run build-win --if-present
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        tag_name: ${{ steps.get-version.outputs.version }}
        release_name: Release ${{ steps.get-version.outputs.version }}
        body: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-dmg
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/chaat-${{ steps.get-version.outputs.version }}.dmg
        asset_name: chaat-${{ steps.get-version.outputs.version }}.dmg
        asset_content_type: application/zip 
    - name: Upload Release Asset
      id: upload-release-exe
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/chaat Setup ${{ steps.get-version.outputs.version }}.exe
        asset_name: chaat Setup ${{ steps.get-version.outputs.version }}.exe
        asset_content_type: application/zip 
